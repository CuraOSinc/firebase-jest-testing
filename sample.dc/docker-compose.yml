#
# docker-compose.yml
#
# Launch emulators; provide a means to warm them up.
#
# Used by:
#   - manual development ('docker compose up -d' directly or via 'npm run up')
#   - CI
#     - with 'docker-compose.ci.yml' overrides
#
#   Current folder: sample
#
# Environment:
#   - CI_BUILDER_IMAGE (optional); name of the builder image.
#
# Intentions:
#   Within a Docker universe,
#     - launch Firebase Emulators using 'firebase.json'
#       - exposing ports for Firestore and Cloud Functions (Firebase Auth port not needed)
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
version: '3.0'

services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: ${CI_BUILDER_IMAGE:-firebase-ci-builder:10.0.1-node16-npm8}
      # 10.0.1-node16-npm8 is also available
    ports:
      - "4000:4000"
      - "5002:5002"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      # If you use this in your project, just do this (and copy the files from 'sample'):
      #- .:/work

      # Avoiding duplicate files by mapping to '../sample'.
      #
      # Note: You may reach better throughput (tbd. test) on Docker on Mac by using the ':{ro|cached|delegated}' suffices.
      #
      ## --- RO
      - ../sample/firebase.json:/work/firebase.json:ro
      # --- cached (may change; watched by the Emulators)
      - ../sample/functions:/work/functions:cached
      - ../sample/firestore.indexes.json:/work/firestore.indexes.json:cached
      - ../sample/firestore.rules:/work/firestore.rules:cached
      # --- output
      #- ./firebase-debug.log:/work/firebase-debug.log:delegated
      #- ./firestore-debug.log:/work/firestore-debug.log:delegated
      #- ./ui-debug.log:/work/ui-debug.log:delegated

    working_dir: /work
    command: bash -o pipefail -c
      'echo "Launching Docker... üê≥" &&
      firebase emulators:start --project=demo-1
      '
        #| grep -v -E "Detected demo project ID|You are not signed in to the Firebase CLI|You are not currently authenticated"'
      # Keep project ID in sync with 'test-fns/setup.jest.js'
    environment:
      - CHOKIDAR_USEPOLLING=true
        # Without this, Firebase-tools (9.17.0) don't see changes (Security Rules, Cloud Functions)

  # WARM UP the engines
  #
  # Firebase Emulators are SLOW to wake. This part runs a minimal set of tests (the results of which are not used),
  # to wake up the necessary subsystems server-side. This results in more dependable test times in the actual tests.
  #
  warm-up:
    build:
      context: ../dc-tools/n-user/
      args:
        - NODE=${NODE_V:-16}
    ports:
      - "6768:6768"
    volumes:
      #- .:/work

      ## --- RO
      - ./node_modules:/work/node_modules:ro
      - ../sample/jest.config.default.js:/work/jest.config.default.js:ro
      - ../sample/firebase.json:/work/firebase.json:ro
      - ./package.json:/work/package.json:ro
      - ../sample/test-fns:/work/test-fns:ro
      - ../sample/test-rules:/work/test-rules:ro

      # Remove in your own use:
      #   '../../package' symbolic link would fail; place right in '/work/node_modules'
      #
      - ../package:/package:ro

    working_dir: /work
    #command: sh -o pipefail -c
    #  'ls -al ./test-fns &&
    #  false
    #  '
    command: sh -o pipefail -c
      'wait-for-it emul:6767 --timeout=20 &&
      wait-for-it emul:5002 --timeout=10 &&
      npm run dc:warm-up &&
      echo "[INFO] Warmed up, opening port 6768" &&
      socat TCP-LISTEN:6768,fork TCP:emul:6767
      '
    environment:
      - EMUL_HOST=emul
      - WARM_UP_TIMEOUT=8000
          # seen durations of:
          #   3306, 3324, 4692 ms (fns:userInfo, macOS Intel, DC 4.5)
          #   2206, 2223, 2241 ms (fns:greet, macOS Intel, DC 4.5)

    depends_on: ['emul']
    # Enable manual launch to debug 'emul' launch, only.
    #profiles: ['manual']

  # Used via 'docker compose run --rm warmed-up'.
  #
  # A separate target, so that the warm-up log output is always visible only in Docker Desktop, not the terminal
  # output for something like 'npm test' (if launched with a cold DC).
  #
  warmed-up:
    build:
      context: ../dc-tools/n-user/
      args:
        - NODE=${NODE_V:-16}
    command: sh -o pipefail -c
      'wait-for-it warm-up:6768 --timeout=60
      '
      # seen (cold boot) waits of:
      #   34s (macOS Intel, DX 4.5)
    depends_on: ['warm-up']
    profiles: ['manual']
